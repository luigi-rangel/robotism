/*
 * Copyright 2014-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fr.tp.slr201.projects.robotism.service.simulation.app;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import fr.tp.inf112.projects.canvas.model.Canvas;
import fr.tp.inf112.projects.canvas.model.CanvasPersistenceManager;
import fr.tp.inf112.projects.robotsim.app.SimulatorApplication;
import fr.tp.inf112.projects.robotsim.model.Factory;
import fr.tp.inf112.projects.robotsim.model.RemoteFactoryPersistenceManager;
import fr.tp.inf112.projects.robotsim.model.notifier.FactoryModelChangedNotifier;
import fr.tp.slr112.projects.robotsim.utils.SimulationServiceUtils;

@RestController
public class Controller {
	private static final Logger LOGGER = Logger.getLogger(Controller.class.getName());
	
	private final CanvasPersistenceManager persistenceManager = new RemoteFactoryPersistenceManager(null);
	
	private static final HashMap<String,Factory> canvasMap = new HashMap<String,Factory>();
	
	@Autowired
	private KafkaTemplate<String, Factory> simulationEventTemplate;


	@GetMapping("/start/{id}")
	public Factory startAnimation(@PathVariable String id) {
		LOGGER.info("Starting animation " + id);
		try {
			Factory canvas = canvasMap.get(id);
			if(canvas == null) {
				canvas = (Factory) this.persistenceManager.read(id);
			}
			final FactoryModelChangedNotifier notifier = new
					KafkaFactoryModelChangeNotifier(canvas, simulationEventTemplate);
					canvas.setNotifier(notifier);
			canvasMap.put(id, canvas);
			
			canvas.startSimulation();
			
			return canvas;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	@GetMapping("/model/{id}")
	public Factory getModel(@PathVariable String id) {
		return canvasMap.get(id);
	}
	
	@GetMapping("/stop/{id}")
	public Factory stopModel(@PathVariable String id) {
		LOGGER.info("Stopping animation " + id);
		Factory model = canvasMap.remove(id);
		if(model == null) return null;
		
		model.stopSimulation();
		return model;
	}
	
	@GetMapping("/save/{id}")
	public void saveModel(@PathVariable String id) {
		if(id == SimulationServiceUtils.DEFAULT_ID) return;
		
		Factory model;
		if(canvasMap.containsKey(id)) {
			model = canvasMap.get(id);
		} else {
			model = canvasMap.get(SimulationServiceUtils.DEFAULT_ID);
		}
		
		if(model == null) return;
		
		LOGGER.info("Saving model " + id);
		
		try {
			int port = 80;
			InetAddress netAddr = InetAddress.getByName("localhost");
			SocketAddress sockAddr = new InetSocketAddress(netAddr, port);
			try (Socket socket = new Socket()) {
				socket.connect(sockAddr, 1000);
				
				OutputStream outStr = socket.getOutputStream();
				ObjectOutputStream oos = new ObjectOutputStream(outStr);
				
				oos.writeObject(model);
                oos.flush();
				oos.close();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
