package fr.tp.inf112.projects.robotsim.app;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.logging.Logger;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;

import fr.tp.inf112.projects.canvas.controller.Observer;
import fr.tp.inf112.projects.canvas.model.Canvas;
import fr.tp.inf112.projects.canvas.model.CanvasPersistenceManager;
import fr.tp.inf112.projects.canvas.model.impl.BasicVertex;
import fr.tp.inf112.projects.robotsim.model.Component;
import fr.tp.inf112.projects.robotsim.model.Factory;
import fr.tp.inf112.projects.robotsim.model.notifier.FactorySimulationEventConsumer;
import fr.tp.inf112.projects.robotsim.model.shapes.PositionedShape;
import fr.tp.slr112.projects.robotsim.utils.SimulationServiceUtils;

public class RemoteSimulatorController extends SimulatorController {
	private static final Logger LOGGER = Logger.getLogger(RemoteSimulatorController.class.getName());
	
	private final PolymorphicTypeValidator typeValidator =
		BasicPolymorphicTypeValidator.builder()
			.allowIfSubType(PositionedShape.class.getPackageName())
			.allowIfSubType(Component.class.getPackageName())
			.allowIfSubType(BasicVertex.class.getPackageName())
			.allowIfSubType(ArrayList.class.getName())
			.allowIfSubType(LinkedHashSet.class.getName())
			.build();
	private final ObjectMapper objectMapper = new ObjectMapper();
	
	public RemoteSimulatorController(final CanvasPersistenceManager persistenceManager) {
		this(null, persistenceManager);
	}
	
	public RemoteSimulatorController(final Factory factoryModel,
			   final CanvasPersistenceManager persistenceManager) {
		super(factoryModel, persistenceManager);
		
		objectMapper.activateDefaultTyping(typeValidator, ObjectMapper.DefaultTyping.NON_FINAL);
	}
	
	@Override
	public void startAnimation() {
		getCanvas().simulationStarted = true;
		HttpClient httpClient = HttpClient.newHttpClient();
		try {
			URI uri = new URI("http", 
					null, 
					"localhost", 
					8080, 
					"/start/" + (getCanvas().getId() == null ? SimulationServiceUtils.DEFAULT_ID : getCanvas().getId()),
					null, 
					null);
			LOGGER.info(uri.toString());
			HttpRequest request = HttpRequest.newBuilder().uri(uri).GET().build();
			HttpResponse<String> response = httpClient.send(request,	
					 HttpResponse.BodyHandlers.ofString());
			Factory factory = objectMapper.readValue(response.body(), Factory.class);
			setCanvas(factory);
			updateViewer();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Override
	public void stopAnimation() {
		HttpClient httpClient = HttpClient.newHttpClient();
		try {
			URI uri = new URI("http", 
					null, 
					"localhost", 
					8080, 
					"/stop/" + (getCanvas().getId() == null ? SimulationServiceUtils.DEFAULT_ID : getCanvas().getId()),
					null, 
					null);
			HttpRequest request = HttpRequest.newBuilder().uri(uri).GET().build();
			HttpResponse<String> response = httpClient.send(request,
					 HttpResponse.BodyHandlers.ofString());
			getCanvas().simulationStarted = false;
			Factory factory = objectMapper.readValue(response.body(), Factory.class);
			setCanvas(factory);
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void updateViewer()
	throws InterruptedException, URISyntaxException, IOException {
		FactorySimulationEventConsumer consumer = new FactorySimulationEventConsumer(this);
		consumer.consumeMessages();
	}
	
	/**
	* {@inheritDoc}
	*/
	@Override
	public void setCanvas(final Canvas canvasModel) {
		final List<Observer> observers = getCanvas().getObservers();
		final boolean isSimulationStarted = getCanvas().isSimulationStarted();
		if(SimulationServiceUtils.DEFAULT_ID.equals(canvasModel.getId())) {
			canvasModel.setId(null);
		}
		super.setCanvas(canvasModel);
		for (final Observer observer : observers) {
			getCanvas().addObserver(observer);
		}
		getCanvas().simulationStarted = isSimulationStarted;
		getCanvas().notifyObservers();
	}
	
	public void setCanvas(final String canvasModel) {
		try {
			Factory model = objectMapper.readValue(canvasModel, Factory.class);
			setCanvas(model);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
	}

}
