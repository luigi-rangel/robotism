package fr.tp.slr201.projects.robotism.service.simulation.app;

import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.springframework.kafka.config.TopicBuilder;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.kafka.support.SendResult;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

import fr.tp.inf112.projects.canvas.controller.Observer;
import fr.tp.inf112.projects.robotsim.model.Factory;
import fr.tp.inf112.projects.robotsim.model.notifier.FactoryModelChangedNotifier;

public class KafkaFactoryModelChangeNotifier implements FactoryModelChangedNotifier {
	
	private Factory factoryModel;
	private KafkaTemplate<String, Factory> simulationEventTemplate;
	
	public KafkaFactoryModelChangeNotifier(Factory factoryModel, 
										   KafkaTemplate<String, Factory> simulationEventTemplate) {
		this.factoryModel = factoryModel;
		this.simulationEventTemplate = simulationEventTemplate;
		TopicBuilder.name("simulation-" + factoryModel.getId()).build();
	}

	@Override
	public boolean addObserver(Observer observer) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean removeObserver(Observer observer) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void notifyObservers() {
		final Message<Factory> factoryMessage = MessageBuilder.withPayload(factoryModel)
				.setHeader(KafkaHeaders.TOPIC, "simulation-" + factoryModel.getId())
				.build();
		
		final CompletableFuture<SendResult<String, Factory>> sendResult =
				simulationEventTemplate.send(factoryMessage);
				sendResult.whenComplete((result, ex) -> {
					if (ex != null) {
						throw new RuntimeException(ex);
					}
				});
	}

	@Override
	public List<Observer> getObservers() {
		// TODO Auto-generated method stub
		return null;
	}

}
