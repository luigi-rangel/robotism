/*
 * Copyright 2014-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fr.tp.slr201.projects.robotism.service.simulation.app;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import fr.tp.inf112.projects.canvas.model.Canvas;
import fr.tp.inf112.projects.canvas.model.CanvasPersistenceManager;
import fr.tp.inf112.projects.robotsim.model.Factory;
import fr.tp.inf112.projects.robotsim.model.RemoteFactoryPersistenceManager;
import fr.tp.inf112.projects.robotsim.model.notifier.FactoryModelChangedNotifier;

@RestController
public class Controller {
	private final CanvasPersistenceManager persistenceManager = new RemoteFactoryPersistenceManager(null);
	
	private static final HashMap<String,Factory> canvasMap = new HashMap<String,Factory>();
	
	@Autowired
	private KafkaTemplate<String, Factory> simulationEventTemplate;


	@GetMapping("/start/{id}")
	public Factory startAnimation(@PathVariable String id) {
		try {
			Factory canvas = canvasMap.get(id);
			if(canvas == null) {
				canvas = (Factory) this.persistenceManager.read(id);
			}
			final FactoryModelChangedNotifier notifier = new
					KafkaFactoryModelChangeNotifier(canvas, simulationEventTemplate);
					canvas.setNotifier(notifier);
			canvasMap.put(id, canvas);
			
			canvas.startSimulation();
			
			return canvas;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	@GetMapping("/model/{id}")
	public Factory getModel(@PathVariable String id) {
		return canvasMap.get(id);
	}
	
	@GetMapping("/stop/{id}")
	public Factory stopModel(@PathVariable String id) {
		Factory model = canvasMap.remove(id);
		model.stopSimulation();
		return model;
	}
}
